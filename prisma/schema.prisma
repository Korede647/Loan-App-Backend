// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PaidStatus {
  PENDING
  PAID
  LATE
}

enum TransactType {
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  PENALTY
  REFUND
}

enum PaymentMethod {
  BANK_TRANSFER
  MOBILE_MONEY
  CARD
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum NotificationType {
  LOAN_UPDATE
  REPAYMENT_DUE
  PAYMENT_RECEIVED
}

model User {
  id                       Int       @id @default(autoincrement())
  firstName                String?
  lastName                 String?
  email                    String    @unique
  password                 String?
  profilePicture           String?
  role                     Role      @default(USER)
  creditScore              Int?       @default(0)
  googleId                 String?   @unique
  emailVerified            Boolean?  @default(false)
  otp                      String?
  otpExpiry                DateTime? @default(now())
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime? @default(now())
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  Loan         Loans[]
  Payment      Payment[]
  Transaction  Transaction[]
  Notification Notification[]
}

model Loans {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  amount             Float
  interest_rate      Float?
  tenure_months      Int
  status             Status? @default(PENDING)
  repayment_schedule Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  Payment     Payment[]
  Transaction Transaction[]
}

model Payment {
  id          Int        @id @default(autoincrement())
  loanId      Int
  userId      Int
  loan        Loans      @relation(fields: [loanId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  amount_paid Float
  due_date    DateTime
  paid_on     DateTime
  status      PaidStatus
  createdAt   DateTime   @default(now())
}

model Transaction {
  id                    Int               @id @default(autoincrement())
  user_id               Int
  loan_id               Int
  user                  User              @relation(fields: [user_id], references: [id])
  loan                  Loans             @relation(fields: [loan_id], references: [id])
  transaction           TransactType
  amount                Float
  payment_method        PaymentMethod
  transaction_reference String
  status                TransactionStatus
  createdAt             DateTime          @default(now())
}

model Notification {
  id               Int              @id @default(autoincrement())
  user_id          Int
  user             User             @relation(fields: [user_id], references: [id])
  message          String
  notificationType NotificationType
  is_read          Boolean          @default(false)
  createdAt        DateTime
}
